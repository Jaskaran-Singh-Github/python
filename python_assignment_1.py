# -*- coding: utf-8 -*-
"""Python Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h4ZmafO5mLzy9FHLAox98dEkB8LcwD-6

**Task 1 LISTS**
"""

#Solution 1
def multiply_list(numbers):
    result = 1
    for num in numbers:
        result *= num
    return result
numbers = [2, 3, 4, 5]
print("Product of all elements:", multiply_list(numbers))

#Solution 2
def find_largest_number(numbers):
    if not numbers:
        return None
    return max(numbers)
num_list = [10, 25, 78, 34, 99, 15]
largest = find_largest_number(num_list)
print(f"The largest number is: {largest}")

#Solution 3
numbers = [5, 2, 8, 1, 9]
smallest = numbers[0]

for num in numbers:
    if num < smallest:
        smallest = num

print(smallest)

#Solution 4
def sort_by_last_element(tuples_list):
    return sorted(tuples_list, key=lambda x: x[-1])
tuple_list = [(1, 3), (3, 2), (2, 4), (5, 1)]
sorted_list = sort_by_last_element(tuple_list)
print("Sorted List:", sorted_list)

#Solution 5
my_list = [1, 2, 2, 3, 4, 4, 5,8,9,10]
unique_list = list(set(my_list))
print(unique_list)

#Solution 6
my_list = []

if not my_list:
    print("The list is empty")
else:
    print("The list is not empty")

#Solution 7
def count_lowercase_letters(words):
    return sum(sum(1 for char in word if char.islower()) for word in words)
word_list = ["Hello", "world", "Python", "is", "Awesome"]
lowercase_count = count_lowercase_letters(word_list)
print("Total lowercase letters:", lowercase_count)

#Solution 8
from collections import Counter

def extract_consecutive_elements(lst, n):
    counts = Counter(lst)
    return [key for key, value in counts.items() if value >= n]
lst1 = [1, 1, 3, 4, 4, 5, 6, 7]
lst2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]

print(extract_consecutive_elements(lst1, 2))
print(extract_consecutive_elements(lst2, 4))

#Solution 9
def largest_odd_number(lst):
    odds = [num for num in lst if num % 2 != 0]
    return max(odds) if odds else None


print(largest_odd_number([0, 9, 2, 4, 5, 6]))
print(largest_odd_number([-4, 0, 6, 1, 0, 2]))
print(largest_odd_number([1, 2, 3]))
print(largest_odd_number([-4, 0, 5, 1, 0, 1]))

#Solution 10
def remove_elements(lst):
    return [lst[i] for i in range(len(lst)) if i not in (0, 4, 5)]
sample_list = ['A', 'B', 'C', 'D', 'E', 'F']
print(remove_elements(sample_list))

"""**Task 2 TUPLES**"""

#Solution 1
my_tuple = (10, 3.14, "Hello", True, [1, 2, 3], (4, 5, 6), {'a': 1, 'b': 2})
print(my_tuple)
print([type(item) for item in my_tuple])

#Solution 2
numbers_tuple = (10, 20, 30, 40, 50)
print(numbers_tuple[0])

#Solution 3
my_tuple = (1, 2, 3)
new_tuple = my_tuple + (4,)
print(new_tuple)

#Solution 4
my_tuple = (10, 20, 30, 40, 50, 60, 70, 80)
fourth_from_last = my_tuple[-4]
print(fourth_from_last)

#Solution 5
my_tuple = (("a", 1), ("b", 2), ("c", 3))
my_dict = dict(my_tuple)
print(my_dict)

#Solution 6
sample_list = [(10, 20, 40), (40, 50, 60), (70, 80, 90)]
updated_list = [t[:-1] + (100,) for t in sample_list]
print(updated_list)

"""**Task 3 DICTIONARY**"""

#Solution 1
my_dict = {'apple': 3, 'banana': 1, 'cherry': 5, 'date': 2}
asc_sorted = dict(sorted(my_dict.items(), key=lambda item: item[1]))
desc_sorted = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))
print("Ascending order:", asc_sorted)
print("Descending order:", desc_sorted)

#Solution 2
my_dict = {'Name': 'Alice', 'Age': 25, 'City': 'New York'}
for key, value in my_dict.items():
    print(f"{key}: {value}")

#Solution 3
dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}
dict1.update(dict2)
print(dict1)

#Solution 4
my_dict = {'a': 10, 'b': 20, 'c': 30}
total_sum = sum(my_dict.values())
print("Sum of all values:", total_sum)

#solution 5
my_dict = {'a': 2, 'b': 3, 'c': 4}
product = 1
for value in my_dict.values():
    product *= value
print("Product of all values:", product)

#Solution 6
my_dict = {'b': 3, 'a': 1, 'c': 2}
sorted_dict = dict(sorted(my_dict.items()))
print("Sorted dictionary by key:", sorted_dict)

#Solution 7
my_dict = {'a': 1, 'b': 2, 'c': 2, 'd': 3, 'e': 1}
unique_dict = {}
for key, value in my_dict.items():
    if value not in unique_dict.values():
        unique_dict[key] = value
print("Dictionary after removing duplicates:", unique_dict)

"""**Task 4 NUMPY**"""

#1: Numpy array creation and manipulation

#Solution 1
import numpy as np
# Create a 1D Numpy array containing 10 random integers between 0 and 99
a = np.random.randint(0, 100, 10)
print(a)

#Solution 2
import numpy as np
# Create a 2D Numpy array of shape (3, 4) containing random integers between -10 and 10
b = np.random.randint(-10, 11, (3, 4))

print(b)

#Solution 3
import numpy as np
b = np.random.randint(-10, 11, (3, 4))
b_flat = b.reshape(-1)
print(b_flat)

#Solution 4
import numpy as np
a = np.random.randint(0, 100, 10)
a_copy = a.copy()
a_copy[0] = -1
print("Original array 'a':", a)
print("Modified copy 'a_copy':", a_copy)

#Solution 5
import numpy as np
a = np.random.randint(0, 100, 10)
c = a[::2]
print("Original array 'a':", a)
print("Array 'c' with every second element:", c)

#2: Numpy array indexing and slicing

#Solution 1
a = [1, 2, 3, 4, 5]
print(a[2])

#Solution 2
b = [10, 20, 30, 40, 50]
print(b[-1])

#Solution 3
b = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
]

for row in b[:2]:
    print(row[-2:])

#Solution 4
b = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
]

b_row = b[1]
print(b_row)

#Solution 5
b = [
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
]

b_col = [row[0] for row in b]
print(b_col)

#3: Numpy array operations

#Solution 1
import numpy as np

d = np.arange(1, 11)
print(d)

#Solution 2
import numpy as np

a = np.array([1, 2, 3, 4, 5])
d = np.arange(1, 11)[:5]

e = a + d
print(e)

#Solution 3
import numpy as np

b = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
])

b_double = b * 2
print(b_double)

#Solution 4
import numpy as np

b = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
])

b_double = b * 2

f = np.dot(b, b_double.T)
print(f)

#Solution 5
import numpy as np

a = np.array([1, 2, 3, 4, 5])
b = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
])
b_double = b * 2

mean_a = np.mean(a)
mean_b = np.mean(b)
mean_b_double = np.mean(b_double)

g = np.array([mean_a, mean_b, mean_b_double])
print(g)

#4: Numpy array aggregation

#Solution 1
import numpy as np

a = np.array([1, 2, 3, 4, 5])

a_sum = np.sum(a)
print(a_sum)

#Solution 2
import numpy as np

b = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
])

b_min = np.min(b)
print(b_min)

#Solution 3
import numpy as np

b = np.array([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15]
])

b_double = b * 2  # Multiply b by 2 to g

b_double_max = np.max(b_double)
print(b_double_max)

"""**Task-5 Pandas**"""

#Solution 1
import pandas as pd
df = pd.read_csv('Sport car price.csv')
print(df.head())

#Solution 2
import pandas as pd
df = pd.read_csv('Sport car price.csv')
df_cleaned = df.dropna()
df_cleaned = df_cleaned.drop_duplicates()
df_cleaned = df_cleaned.apply(pd.to_numeric, errors='coerce')
print(df_cleaned.head())

#Solution 3
import pandas as pd
df = pd.read_csv('Sport car price.csv')
summary = df.describe()
print(summary)

#Solution 4
import pandas as pd
data = {
    'Car Make': ['Toyota', 'Honda', 'Toyota', 'Ford', 'Honda'],
    'Price': [20000, 22000, 18000, 25000, 23000]
}
df = pd.DataFrame(data)
average_price = df.groupby('Car Make')['Price'].mean()
print(average_price)

#Solution 5
import pandas as pd
data = {
    'Year': [2020, 2020, 2021, 2021, 2022],
    'Horsepower': [150, 160, 170, 180, 190]
}
df = pd.DataFrame(data)
average_horsepower = df.groupby('Year')['Horsepower'].mean()
print(average_horsepower)

#Solution 6
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = {
    'Price': [20000, 22000, 25000, 18000, 23000],
    'Horsepower': [150, 160, 180, 140, 170]
}
df = pd.DataFrame(data)
sns.lmplot(x='Horsepower', y='Price', data=df)
plt.title('Price vs Horsepower with Linear Regression Line')
plt.xlabel('Horsepower')
plt.ylabel('Price')
plt.show()

#Solution 7
import pandas as pd
import matplotlib.pyplot as plt
data = {
    '0-60 MPH Time': [6.5, 7.2, 5.8, 6.1, 7.0, 6.3, 6.9, 6.0, 5.5]
}
df = pd.DataFrame(data)
plt.hist(df['0-60 MPH Time'], bins=np.arange(df['0-60 MPH Time'].min(), df['0-60 MPH Time'].max() + 0.5, 0.5), edgecolor='black')
plt.title('Histogram of 0-60 MPH Times')
plt.xlabel('0-60 MPH Time (seconds)')
plt.ylabel('Frequency')
plt.show()

#Solution 8
import pandas as pd
data = {
    'Car Make': ['Car A', 'Car B', 'Car C', 'Car D', 'Car E'],
    'Price': [600000, 450000, 700000, 300000, 550000],
    'Horsepower': [500, 400, 600, 350, 550]
}
df = pd.DataFrame(data)
filtered_df = df[df['Price'] > 500000]
sorted_df = filtered_df.sort_values(by='Horsepower', ascending=False)
print(sorted_df)

#Solution 9
import pandas as pd
data = {
    'Car Make': ['Car A', 'Car C', 'Car E'],
    'Price': [600000, 700000, 550000],
    'Horsepower': [500, 600, 550]
}
df = pd.DataFrame(data)
df.to_csv('cleaned_cars_dataset.csv', index=False)
print("Dataset has been exported to 'cleaned_cars_dataset.csv'.")